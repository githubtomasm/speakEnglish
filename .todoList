PENDIENTE:
json para level_index
  -agregar rules en LevelsRequest class



formato para level index update in INDEX page 
levels = [
  0 => [
    id0    => 1,
    index0 => 5
  ],

  1 => [
    id1     => 2,
    index1  => 8,   
  ],

  2 => [
    id2     => 4,
    index2  => 5,   
  ],

  ....

]




json para agregar lecciones
  -agregar rules en LessonsRequest class














  CREAR LECCIONES DENTRO DE NIVLES:        
  --------------------------------
  
  single request for each new lesson added
  
  1 - fetch the data from ajax 
  2 - validate new data, requeried fields
  4 - validate if level exist
  3 - create the new lesson 
  5 - asociate the lesson with the level
  6 - response back acord.
      - if is status surccess
          - return the new lesson in the response with it level_index 

               - id which resource is making the request
                STORE
                    -> store action one single request to store ( all data will be sent simultaniasly)
                        
                        -> basic info ( all ways )
                                required levels, title and description
                        
                        -> pool lesson ( optional )
                                make sure that the lesson exists
                        
                        -> new lesson ( optional )
                                lesson's required files and
                                attach lesson to level 
                                create lesson 
                    

                UDPATE
                    -> this can be save in multiple actions, can be done s.  
                        -> Basic info.
                        -> pool lesson
                        -> new lesson   

            - pass the apropieate rules





LEVELS:
--------------------------------
    1 - middle ware roles can edit. (done)
		2 - finish update 
				- udpate main info (done)
				- update new lessons pool (done)
        - update lessons brand new 

		3 - Delete levels
				- make sure all is working



FLASH MESSAGE (done)
-----------------------------------



REST API:
-----------------------------------
	1 - API
	2 - CRUD
	3 - proper middle wares and response to ajax requests





5 - LESSONS		 		 			


6 - ASSETS







-----------------
 TO DO LIST
-----------------

Handeling errors (i.e levels/edit route with an id that does not exist, catch the NotFoundHttpException exeption )
	- redirect back and display flash message



level index needs to be unique,  
   - db migration to unique row
   - migration and seed change it to create unique inputs for this row
 


Add many to many relation sheeps between Levels and assigned users to that level 
   - add db migration and create table level_assigned_users : this will contain any assigned users to this level
   - add the middleware for it, only assigned users can edit the level thats has been assigned to
   - for lessons inside of the Level, only assigned users or owner can edit the lessons
 





EDITAR LECCION WORKFLOW
https://laracasts.com/discuss/channels/general-discussion/eloquent-sync-associate?page=1
http://laravel.io/forum/02-02-2014-is-there-a-shortcut-for-syncing-one-to-many-relationships
--------------------------------------------------------------------------------------------

get the id of the level been edited
get the request past by the form
validate the data pass

check if the level exist
udpate the basic info
update lessons of level

LESSONS: 
    brand add new 
        -> save the lesson and add the relationship 
    add from pool,  
        -> find the lesson and update the relationship ( update to be level_id != 0 )
    remove
        -> find the lesson and remove the relationsip ( level_id = 0 )
    
    WORKFLOW:
        post to lessons/{id}/udpate        
        lesson object must include and array of object wich key id the action for each case
            lessons : {
                
                new     : array [ lessons objects ]
                udpate  : array [ lessons objects ]
     
            } 







UPDATED BY table
----------------
need to think it over


use same table for all related updates to, lessons, levels, assets
tables schema
  - entity      -> string (   lesson, level, asset )
  - entity_id   -> integer (  id of the entity beeing update )
  - user_id     -> ingeger (  id of ther user performing the update )      
  - dates       -> longtext(  )





# NOTE
############################

# check if routes work normally
# check levels create form
# add route names
# check edit form and remove partial add form body direct to the view
# remove auth middleware from controllers
# add admin middle ware
# add only by ajax access to the rest routes like getjson 
# middleware for store
# flash messages



